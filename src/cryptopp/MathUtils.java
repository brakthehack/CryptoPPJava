/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
   
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
   
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package cryptopp;
/**
 * Math utils used from CryptoPP library
 * @author Wei Dai
 *
 */
public final class MathUtils {

	public static final int roundUpToMultipleOf(int n, int m) {
		if (n + m - 1 < n)
			throw new IllegalArgumentException("RoundUpToMultipleOf: integer overflow");
		else
			return roundDownToMultipleOf(n+m-1, m);
	}
	
	public static final int roundDownToMultipleOf(int n, int m) {
		if (isPowerOfTwo(m))
			return n - modPowerOfTwo(n, m);
		else
			return n - n % m;
	}
	
	public static final int modPowerOfTwo(int n, int m) {
		assert(isPowerOfTwo(m));
		return n & (m - 1);
	}
	
	public static final boolean isPowerOfTwo(int n) {
		return n > 0 && (n & (n - 1)) == 0;
	}
	
	public static final long checkBytePrecision(int len) {
		if (len == 0) return 0;
		
		long l = 0, h = 32;
		while (h - 1 > 8) {
			long t = (l + h) / 2;
			if ((len >>> t) > 0)
				l = t;
			else
				h = t;
		}
		
		return h / 8;
	}

}
